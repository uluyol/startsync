// Code generated by protoc-gen-go.
// source: pb/startsync.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/startsync.proto

It has these top-level messages:
	WaitReq
	WaitResp
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WaitReq struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *WaitReq) Reset()                    { *m = WaitReq{} }
func (m *WaitReq) String() string            { return proto.CompactTextString(m) }
func (*WaitReq) ProtoMessage()               {}
func (*WaitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type WaitResp struct {
	Start bool  `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *WaitResp) Reset()                    { *m = WaitResp{} }
func (m *WaitResp) String() string            { return proto.CompactTextString(m) }
func (*WaitResp) ProtoMessage()               {}
func (*WaitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*WaitReq)(nil), "startsync.WaitReq")
	proto.RegisterType((*WaitResp)(nil), "startsync.WaitResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for StartSync service

type StartSyncClient interface {
	Wait(ctx context.Context, in *WaitReq, opts ...grpc.CallOption) (*WaitResp, error)
}

type startSyncClient struct {
	cc *grpc.ClientConn
}

func NewStartSyncClient(cc *grpc.ClientConn) StartSyncClient {
	return &startSyncClient{cc}
}

func (c *startSyncClient) Wait(ctx context.Context, in *WaitReq, opts ...grpc.CallOption) (*WaitResp, error) {
	out := new(WaitResp)
	err := grpc.Invoke(ctx, "/startsync.StartSync/Wait", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StartSync service

type StartSyncServer interface {
	Wait(context.Context, *WaitReq) (*WaitResp, error)
}

func RegisterStartSyncServer(s *grpc.Server, srv StartSyncServer) {
	s.RegisterService(&_StartSync_serviceDesc, srv)
}

func _StartSync_Wait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(WaitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(StartSyncServer).Wait(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _StartSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "startsync.StartSync",
	HandlerType: (*StartSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Wait",
			Handler:    _StartSync_Wait_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x48, 0xd2, 0x2f,
	0x2e, 0x49, 0x2c, 0x2a, 0x29, 0xae, 0xcc, 0x4b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x84, 0x0b, 0x28, 0xa9, 0x72, 0xb1, 0x87, 0x27, 0x66, 0x96, 0x04, 0xa5, 0x16, 0x0a, 0x71, 0x73,
	0x31, 0x67, 0xa7, 0x56, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x0a, 0xf1, 0x72, 0xb1, 0x26, 0xe7,
	0x97, 0xe6, 0x95, 0x48, 0x30, 0x01, 0xb9, 0xac, 0x4a, 0x1a, 0x5c, 0x1c, 0x10, 0x65, 0xc5, 0x05,
	0x20, 0x29, 0xb0, 0x7e, 0xb0, 0x4a, 0x0e, 0x34, 0x95, 0x46, 0x76, 0x5c, 0x9c, 0xc1, 0x20, 0xd9,
	0x60, 0xa0, 0xe9, 0x42, 0x86, 0x5c, 0x2c, 0x20, 0x6d, 0x42, 0x42, 0x7a, 0x08, 0x27, 0x40, 0xad,
	0x93, 0x12, 0xc6, 0x10, 0x2b, 0x2e, 0x50, 0x62, 0x70, 0x62, 0x89, 0x62, 0x2a, 0x48, 0x4a, 0x62,
	0x03, 0x3b, 0xd4, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x22, 0x07, 0xee, 0xeb, 0xbe, 0x00, 0x00,
	0x00,
}
